{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"f",
				"fibh"
			],
			[
				"re",
				"return"
			],
			[
				"out",
				"outB"
			],
			[
				"Se",
				"Series1"
			],
			[
				"V",
				"ValueIndex"
			],
			[
				"va",
				"ValueIndex"
			],
			[
				"A",
				"AveragedBHall"
			],
			[
				"tem",
				"tempInB"
			],
			[
				"siz",
				"size"
			],
			[
				"Add",
				"AddXY"
			],
			[
				"Ser",
				"Series4"
			],
			[
				"whil",
				"while1"
			],
			[
				"beg",
				"beg-4"
			],
			[
				"doA",
				"doAlgAnimation"
			],
			[
				"end",
				"endbru"
			],
			[
				"ge",
				"getDescription"
			],
			[
				"Des",
				"getDescription"
			],
			[
				"me",
				"methodDescription"
			],
			[
				"pro",
				"prototype"
			],
			[
				"sv",
				"svgName"
			],
			[
				"Ave",
				"AveragedMagnetoResistance"
			],
			[
				"Avera",
				"AveragedBMagnetoResistance"
			],
			[
				"getP",
				"getPointerMagnetoResistance"
			],
			[
				"inBRe",
				"inBRes"
			],
			[
				"tempIn",
				"tempInBRes"
			],
			[
				"tempOut",
				"tempOutB"
			],
			[
				"temo",
				"tempOutB"
			],
			[
				"Av",
				"AveragedBHall"
			],
			[
				"ri",
				"right"
			],
			[
				"be",
				"beginend	$1.begin(), $1.end()"
			],
			[
				"R",
				"Res"
			],
			[
				"H",
				"Hall"
			],
			[
				"B",
				"BHall"
			],
			[
				"Re",
				"ResSize"
			],
			[
				"get",
				"getPointerB"
			],
			[
				"pu",
				"push_back"
			],
			[
				"p",
				"push_back"
			],
			[
				"j",
				"j"
			],
			[
				"in",
				"indexOfElemClosestToValue"
			],
			[
				"Ma",
				"MagnetoResistance"
			],
			[
				"M",
				"MagnetoResistance"
			],
			[
				"D",
				"Dependence"
			],
			[
				"size",
				"size_t"
			],
			[
				"el",
				"indexOfElemClosestToValue"
			],
			[
				"g",
				"getYbyX"
			],
			[
				"y",
				"y0"
			],
			[
				"si",
				"size_t"
			],
			[
				"ind",
				"indexOfElemClosestToValue"
			],
			[
				"i",
				"ind"
			],
			[
				"s",
				"setX"
			],
			[
				"Depe",
				"DependenceH"
			],
			[
				"mi",
				"min_elem"
			],
			[
				"m",
				"max_abs_elem"
			],
			[
				"FilteredB",
				"FilteredBHall"
			],
			[
				"F",
				"FilteredB"
			],
			[
				"P",
				"PowPolinomRes"
			],
			[
				"PoW",
				"PowPolinomRes"
			],
			[
				"Pow",
				"PowPolinomHall"
			],
			[
				"b",
				"back"
			],
			[
				"pow",
				"powPolinowHall"
			],
			[
				"po",
				"polinomPowForHallEffect"
			],
			[
				"e",
				"extrapolateData"
			],
			[
				"Filtered",
				"FilteredMagnetoResistance"
			],
			[
				"Si",
				"SignalToExtrapolate"
			],
			[
				"newg",
				"negativeNewB"
			],
			[
				"new",
				"newB"
			],
			[
				"inB",
				"inBHall"
			],
			[
				"v",
				"value"
			],
			[
				"TSi",
				"TSignalIt"
			],
			[
				"h",
				"HallEffect"
			],
			[
				"E",
				"ExtapolatePolinomDegree"
			],
			[
				"T",
				"TSignal"
			],
			[
				"fo",
				"forv	Vector For Loop"
			],
			[
				"sig",
				"signal"
			],
			[
				"I",
				"iterator"
			],
			[
				"min",
				"min-i"
			],
			[
				"le",
				"length"
			],
			[
				"Me",
				"Memo2"
			],
			[
				"за",
				"зависимостей"
			],
			[
				"cha",
				"chanInfo"
			],
			[
				"de",
				"delete"
			],
			[
				"Is",
				"isWriting"
			],
			[
				"Po",
				"pointToX"
			],
			[
				"t",
				"true"
			],
			[
				"con",
				"concatDependence"
			],
			[
				"Cl",
				"clearFilteredParams"
			],
			[
				"Fil",
				"FileName"
			],
			[
				"sh",
				"shiftValue"
			],
			[
				"sw",
				"switch"
			],
			[
				"Da",
				"DataKind"
			],
			[
				"Fb",
				"FilteredB"
			],
			[
				"Fih",
				"FilteredHallEffect"
			],
			[
				"Fib",
				"FilteredBHall"
			],
			[
				"l",
				"length"
			],
			[
				"FilteredBr",
				"FilteredBMagnetoResistance"
			],
			[
				"r",
				"right"
			],
			[
				"for",
				"for	For Loop"
			],
			[
				"di",
				"dist"
			],
			[
				"inde",
				"indexes"
			],
			[
				"N",
				"NewLength"
			],
			[
				"ou",
				"outDependence"
			],
			[
				"O",
				"OldLength"
			],
			[
				"MeD",
				"MyDataType"
			],
			[
				"cu",
				"CURRENT_DATA"
			],
			[
				"tos",
				"tempOutSignal"
			],
			[
				"Fi",
				"FilteredHallEffect"
			],
			[
				"calT",
				"calculateTenzorFromEffectiveParams"
			],
			[
				"av",
				"averageData"
			],
			[
				"ave",
				"AveragedB"
			],
			[
				"S",
				"SampleLength"
			],
			[
				"Data",
				"DataKind"
			],
			[
				"NM",
				"NumberOfPoints"
			],
			[
				"Dic",
				"DataTypeInContainer"
			],
			[
				"tor",
				"tempOutResistance"
			],
			[
				"a",
				"averageData"
			],
			[
				"tox",
				"tempOutX"
			],
			[
				"se",
				"settings"
			],
			[
				"Te",
				"Text"
			],
			[
				"Ac",
				"ActivePageIndex"
			],
			[
				"eat",
				"eAttenuationFHall"
			],
			[
				"eb",
				"eBandWidthFHall"
			],
			[
				"eS",
				"eSamplingFHall"
			],
			[
				"sthi",
				"SampleThickness"
			],
			[
				"Sthi",
				"SampleThickness"
			],
			[
				"sl",
				"SampleLength"
			],
			[
				"es",
				"eSampleInventoryNumber"
			],
			[
				"stue",
				"SampleTemperature"
			],
			[
				"Tem",
				"SampleTemperature"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "http://captf.com/practice-ctf/\n\nPractice CTF List / Permanant CTF List\n\nHere's a list of some CTF practice sites and tools or CTFs that are long-running. Thanks, RSnake for starting the original that this is based on. If you have any corrections or suggestions, feel free to email ctf at the domain psifertex with a dot com tld.\n\nLive Online Games\n\nRecommended\n\nWhether they're being updated, contain high quality challenges, or just have a lot of depth, these are probably where you want to spend the most time.\n\nhttp://pwnable.kr/ (one of the more popular recent wargamming sets of challenges)\nhttps://picoctf.com/ (Designed for high school students while the event is usually new every year, it's left online and has a great difficulty progression)\nhttps://microcorruption.com/login (one of the best interfaces, a good difficulty curve and introduction to low-level reverse engineering, specifically on an MSP430)\nhttp://reversing.kr/\nhttp://hax.tor.hu/\nhttps://w3challs.com/\nhttps://pwn0.com/\nhttp://www.smashthestack.org/\nhttp://ringzer0team.com/\nhttp://www.hellboundhackers.org/\nhttp://www.overthewire.org/wargames/\nhttp://counterhack.net/Counter_Hack/Challenges.html\nhttp://www.hackthissite.org/\nhttp://vulnhub.com/\nOthers\n\nhttp://hackthecause.info/\nhttp://bright-shadows.net/\nhttp://www.mod-x.co.uk/main.php\nhttp://scanme.nmap.org/\nhttp://www.hackertest.net/\nhttp://net-force.nl/\nhttp://securityoverride.org/ Some good concepts, but \"canned\" vulnerabilities (string matching on input) will frustrate knowledgable hackers and teach newbies the wrong lessons\nMeta\n\nhttp://www.wechall.net/sites.php (excellent list of challenge sites)\nhttp://ctf.forgottensec.com/wiki/ (good CTF wiki, though focused on CCDC)\nhttp://repo.shell-storm.org/CTF/ (great archive of CTFs)\nWebapp Specific\n\nhttp://demo.testfire.net/\nhttp://wocares.com/xsstester.php\nhttp://crackme.cenzic.com/\nhttp://test.acunetix.com/\nhttp://zero.webappsecurity.com/\nForensics Specific\n\nhttp://computer-forensics.sans.org/community/challenges\nhttp://forensicscontest.com/\nRecruiting\n\nhttps://www.praetorian.com/challenges/pwnable/\nhttp://rtncyberjobs.com/\nhttp://0x41414141.com/\nPaid Training\n\nhttp://heorot.net/\nDownloadable Offline Games\n\nhttp://www.badstore.net/\nhttp://www.owasp.org/index.php/Category:OWASP_WebGoat_Project\nhttp://www.owasp.org/index.php/Owasp_SiteGenerator\nDamn Vulnerable Web App\nStanford SecureBench\nStanford SecureBench Micro\nhttp://www.irongeek.com/i.php?page=security/mutillidae-deliberately-vulnerable-php-owasp-top-10\nVirtual Machines\n\nhttps://pentesterlab.com/exercises/\nhttp://sourceforge.net/projects/metasploitable/files/Metasploitable2/\nDamn Vulnerable Linux (not currently live? local mirror)\nInactive or Gone\n\nJust around for historical sake, or on the off-chance they come back.\n\nhttp://rootcontest.com/\nhttp://intruded.net/\nhttps://how2hack.net\nWebMaven (Buggy Bank)\nhttp://www.foundstone.com/us/resources/proddesc/hacmetravel.htm\nhttp://www.foundstone.com/us/resources/proddesc/hacmebooks.htm\nhttp://www.foundstone.com/us/resources/proddesc/hacmecasino.htm\nhttp://www.foundstone.com/us/resources/proddesc/hacmeshipping.htm\nhttp://hackme.ntobjectives.com/\nhttp://testphp.acunetix.com/\nhttp://testasp.acunetix.com/Default.asp\nhttp://prequals.nuitduhack.com\nhttp://www.gat3way.eu/index.php (Russian)\nhttp://exploit-exercises.com/ (challenges mirrored on vulnhub)\nhttp://damo.clanteam.com/\nhttp://p6drad-teel.net/~windo/wargame/\nhttp://roothack.org/\nhttp://ha.ckers.org/challenge/\nhttp://ha.ckers.org/challenge2/\nhttp://www.dc3.mil/challenge/\n[ICO]	Name	Last modified	Size\n[DIR]	Parent Directory	 	-\nIndices 1.1\n\nhttps://ctf.acm.illinois.edu\n\n\nhttp://mdsec.net/wahh/\n\n\n475758b6dfdc427962ea3ba147468811\nF3B0B5286895251DB239475D0F4F0BA8",
			"file": "/E/Дела/Информационная безопасность/CtfPractise.txt",
			"file_size": 3770,
			"file_write_time": 130918828879140625,
			"settings":
			{
				"buffer_size": 3734,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "флаги от Касперского\n\nв группе 2\nна стене админа 1\nжурнах Хакер в новостях - много\nна главной странице \n\n\ncal.pl\nindex.php\nk1kh31b1n55h.php\nlevel7.php",
			"settings":
			{
				"buffer_size": 150,
				"line_ending": "Windows",
				"name": "флаги от Касперского"
			}
		},
		{
			"contents": "Threat Modeling: Designing for Security \nThe Practice of Network Security Monitoring: Understanding Incident Detection and Response \n Android Hacker's Handbook \n\nShopping (Amazon)\nSocial networking (Facebook)\nBanking (Citibank)\nWeb search (Google)\nAuctions (eBay)\nGambling (Betfair)\nWeb logs (Blogger)\nWeb mail (Gmail)\nInteractive information (Wikipedia)\n\n",
			"settings":
			{
				"buffer_size": 356,
				"line_ending": "Windows",
				"name": "Threat Modeling: Designing for Security"
			}
		},
		{
			"contents": "Основа основ - раз уж мы защищаем информацию, то надо определиться что это такое.\nЯсное дело, что это понятие расплывчатое, но мы ограничим его определением вида (из ФЗ):\nинформация - это сведения, данные независимо от формы их представления.\nПолучается, что это по сути всё - биты на винчестере, флешке, электромагнитные волны от монитора и процессора и так далее.\nПод самой защитой мы понимаем обеспечение конфиденциальности (не даём посторонним доступа), целостности (не даём другим изменять информацию) и доступности (обеспечиваем бесперебойный доступ определенному кругу лиц).\nЭто в принципе всё, что написано в сотнях книг по информационной безопасности на русском языке).\n\nУ нас на кружке мы изучаем только компьютерную безопасность. Получается что техническая(генераторы шума), физическая(замки, заборы, сейфы) и организационная (как обучать сотрудников, как работать с секретной информацией, в том числе как уничтожать) защита информации остаётся за гранью.\nЕсли мы лезем в компьютерную безопасность, то вот что мы имеем:\n1. Информация - это файлы, пакеты, байты, т.е. только цифровая составляющая.\n2. Защищаем мы теперь целостность, конфиденциальность и доступность этих самих байтов.\nПо вопросам:\nУничтожение входит в организационную защиту информации, точнее в правила ведения документооборота. Могу рассказать подробней и об этой части, если хочешь:)\nС определением многие бы поспорили (и действительно спорят, но законодательство есть законодательство, поэтому работает с тем что есть).\nЗащита микроконтроллеров и т.д. от взлома - относится к сохранению целостности информации (например программы в микроконтроллере от изменения, или от перехвата управления), и доступности - микроконтроллер должен продолжать работать и выдавать результаты своей работы своим \"хозяевам\"\n\nИтак компьютерная безопасность. Поскольку исторически сложилось так, что корпорации разработчики программ не хотели тратить деньги на безопасность у каждого направления две противоположных цели - атака и защита . несколько основных направлений : forensic ( компьютерная экспертиза, понять что произошло, как это произошло и кто виноват, либо скрыть все следы) ; reverse engineering обратная разработка - у нас есть программа, нужно понять что она делает (исследование вируса), понять какая у неё защита (кряки к программам так делают), либо всячески затруднить подобное исследование ; криптография (создать стойкий шифр, либо сломать существующий).\nсуществует три способа получить доступ к информации - физический доступ к системе, локальный доступ (когда мы находимся у компьютера, но не можем ковырять его отверткой), и самый актуальный сейчас - удалённый доступ, когда сидя на диване дома можно проникнуть в систему управления большим адронным коллайдером (реальный случай).\n\nРаньше всякая попытка исследования программы считалась незаконной, сейчас некоторые компании наоборот спонсируют поиск уязвимостей.\nУязвимость - это недостаток системы, позволяющий изменить ход работы системы. В самых серьёзных случаях мы получаем полный контроль над системой.\n\nНемного о том, откуда берутся уязвимости. Разумеется это баги, то есть ошибки в программном обеспечении, либо в аппаратуре на который это все работает. Большая часть багов не приводит к уязвимости, программа просто работает не правильно, но перехватить управление мы не можем. Некоторая часть багов является уязвимостями, это значит что теоретически мы можем перехватить управление или получить доступ к конфиденциальной информации. И только часть уязвимостей является эксплуатируемой, то есть есть реальный эксплойт - последовательность действий или байтов, которая позволяет использовать уязвимость.\n\nОсобенности работы эксплойта и его написание сильно отличается в зависимости от того, на каком языке написано приложение и что это за приложение вообще.\nЕсли это веб приложение, то эксплойт будет содержать javascript, php, sql. То есть код на том языке, на котором написан сайт. Если речь идёт об обычной программе - word, autocad и так далее, здесь основная часть кода написана на си ++ и java. Но основное отличие в том, что код этот скомпилирован, то есть из языка си ++ получается машинный код, который дальше исполняется процессором, поэтому эксплойты в этом случае пишутся на машинном языке.\nпоскольку уязвимости бывают очень разные, существует общепринятая классификация по уровню опасности. И два разных подхода к оценке защищенности системы. Первый - оценка уязвимостей. Мы находим уязвимости в системе, оцениваем их по уровню опасности и всё. Сейчас стал очень популярным второй подход - тестирование на проникновение (penetration testing или pentest). В ходе пентеста проводится не только поиск уязвимостей, но и их эксплуатация, чтобы выявить какие из них наиболее опасны.\n\nРазумеется чтобы искать и эксплуатировать уязвимости нужно обладать кучей знаний, навыков, которыми один человек вряд ли может овладеть за всю жизнь. Именно для этого ведётся разработка различных инструментов и утилит для проведения пентеста, компьютерной экспертизы, исследования программ и файлов.\n\nРазумеется чтобы искать и эксплуатировать уязвимости нужно обладать кучей знаний, навыков, которыми один человек вряд ли может овладеть за всю жизнь. Именно для этого ведётся разработка различных инструментов и утилит для проведения пентеста, компьютерной экспертизы, исследования программ и файлов.\nОгpомное количество инструментов собрано в Kali Linux (собирается на основе Debian). *тут я обычно предлагаю его скачать *\n\nСамые важный и популярный инструмент -Metasploit. Это огромный набор инструментов для генерации полезной нагрузки эксплойтов (какие команды выполнит система, когда эксплуатация пройдёт успешно). Обычно это открытие шелла ( думаю ты с ними знакома: cmd, powershell, bash, sh, dash, zsh - кому что удобнее и что из этого есть на атакуемой системе).\n\nВ целом процесс проникновения в систему можно описать так :\n1. Поиск информации о системе, компании, сайте и так далее. На выходе мы получаем ip адреса серверов и возможных точек входа в систему (например локальную сеть предприятия).\n2. Исследование (сканирование) этих целей. Пытаемся узнать что это, какие функции выполняет, операционные системы и их версии, установленные программ, открытые порты, какие службы работают на этих портах и так далее.\n\n3. Поиск уязвимостей. Используем сканеры, смотрим версии по в базе данных по уязвимостям, в общем ищем все что только можно попробовать. \n4. Эксплуатация - мы пробуем проникнуть в систему, через найденные уязвимости.\n5. Пост эксплуатация. Проникли мы в систему, но это не конечная цель, мы должны получить доступ к важным данным, повысить привилегии (до уровня администратора), попытаться закрепиться в системе (backdoor, который всегда будет рад нас видеть)\n6. Отчёт. Описываем что получилось, что нашли и как это можно исправить.\n\nСам по себе пентест также может быть разных видов.\nМетод черного ящика - когда мы не знаем, что за систему тестируем и метод белого ящика - когда мы имеем все данные о ней.\nТакже при проведении реального пентеста важно оговаривать можно ли использовать социальную инженерию. Социальная инженерия позволяет существенно упростить проникновение в систему, потому что главная слабость любой системы - человек.\nТеперь рассмотрим самый первый этап - поиск информации о системе. Первое с чего стоит начать - с веб-сайта организации: данные о сотрудниках, их почта, телефоны и так далее. Можно делать как в ручную, так и с помощью специальных программ.\nСледующий инструмент - whois, сведения о домене, сервере и об администраторах этого домена😉.\nЧтобы получить подробную информацию о сервере существует специальная утилита dig, так команда dig sgugit.ru any расскажет нам об адресах сайта и используемых там dns серверах.\nА dnsenum sgugit.ru - покажет в том числе и все другие сайты, расположенные на этом же сервере (что очень полезно, если эти сайты содержат уязвимости, тогда с помощью этих уязвимостей можно получить доступ к серверу и уже потом спокойно контролировать и сайт тестируемой компании).\n\nСканирование целей, для этого в Кали есть целый ряд инструментов: ping, ping6, arping, nping, p0f и nmap.\nping и ping6 - обычный пинг, по протоколу ICMP, первый по протоколу ipv4, второй по протоколу ipv6.\narping - работает по протоколу ARP ( он используется для преобразования ip адреса в MAC-адрес)\nnping - более мощная утилита, способна работать по нескольким протоколам: TCP, UDP, ICMP и ARP, что позволяет обходить большинство межсетевых экранов:).\np0f - очень интересная утилита, она позволяет определить операционную систему и её версию на тестируемой системе (просто так с удаленным хостом это сделать не получится).\nnmap - уже не стоит использовать на каких-либо сайтах без разрешения, так как это самый популярный инструмент сканирования, позволяет просканировать все порты на удаленной машине и определить какие службы на этих портах работают.\nПо практике, дистрибутив для первых тестов: http://sourceforge.net/projects/metasploitable/files/..\nКали можно найти на офф. сайте (есть уже готовый образ жесткого диска для виртуальной машины):\nhttps://www.kali.org/downloads/\nДля виртуальной машины рекомендую качать 32битную Кали, чтобы две параллельно запущенные виртуальные машины не сильно тормозили:)\nСаму виртуалку - рекомендую VMware Player, так как VirtualBox глючил последнее время.\n\n\n\nСканирование и эксплуатацию в первый раз удобнее делать в Armitage. Это графическая надстройка над огромным фреймворком - Metasploit Framework.\nВ нем содержится огромная база сканирующих модулей, уязвимостей (устаревших) и эксплойтов к ним, а также эксплойтов и бекдоров для стадии постэксплуатации. Т.е. эта система обеспечивает всё что нужно для настоящего пентеста. В том числе с помощью данной системы удобно писать свои собственные эксплойты, или генерировать новые на основе связки нескольких существующих.\nДля запуска Armitage сперва необходимо сгенерировать базу данных для работы, командой: msfdb init.\nПосле этого его можно спокойно запускать, кому как удобнее. При старте он спросит запускать ли свой сервер и базу данных. На всё соглашаемся и ждем.\nКогда он запустится, в левой части - видим модули, все разбиты по группам (сканирующие, эксплойты, пост-эксплуатация и т.д.). Далее в каждой категории находятся эксплойты под нужные платформы (Windows/Linux/Mac/Android/ARM) или программы (например Firefox или telnet).\nДля того, чтобы начать атаку, нужно добавить хост в базу данных. Если мы не знаем его ip-адрес, то в меню Scan используем сканирование с помощью nmap и задаём нужную подсеть для поиска. Результаты сканирования будут выведены в нижней части экрана, где будут перечислены все найденные хосты и имеющаяся о них информация. Нужные хосты можно добавить через меню Hosts - Add, указав их ip-адреса.\nТеперь добавленные хосты появятся в центральном окне Armitage. Если щелкнуть правой кнопкой по любому из хостов и выбрать опцию сканирования - будет проведено сканирование хоста, с поиском открытых портов, запущенных служб, определением версии операционной системы и так далее.\nПосле сканирования при щелчке правой кнопкой мыши появится опция Find Attacks. Вся информация, полученная на этапе сканирования будет использоваться для поиска подходящих модулей. Эти модули в свою очередь проверяют может ли быть на данном хосте определенная уязвимость.\nТак составляется список эксплойтов пригодных для атаки. Теперь для простоты мы запускаем режим Hail Mary (из меню Атаки). Его никогда не стоит использовать при реальной атаке - он слишком заметен, но так как это обучение - мы можем наблюдать в консоли как все, отобранные на предыдущем этапе эксплойты запускаются. После окончания атаки может пройти некоторое время - пока сервер Метасплойта получит ответ от сработавших эксплойтов. Как правило из сотен эксплойтов срабатывают десятки, если не единицы, но и этого достаточно. Если атака удалась, то при правом клике по хосту в меню будут Шеллы (если их несколько - Armitage их просто пронумерует). Собственно система взломана и мы можем делать с ней всё что захотим:).\n\n\nWiFi\n\nОбщий принцип достаточно простой - есть источник (роутер, например соседский), есть приёмник/клиент - ноутбук, телефон. В частотном диапазоне 2.4 ГГц существует 14 каналов. Когда будем атаковать - намного быстрее будет сначала определить канал, на котором работает WiFi, а уже потом проводить атаку - так получится быстрее.\n\nWiFi разумеется имеет некоторую защиту - шифрование. Виды шифрования:\nOPEN - открытая, незащищенная сеть, по которой данные может перехватить кто угодно.\nWEP - старый алгоритм шифрования, давно устарел, но ещё поддерживается роутерами.\nWPA и WPA2 - более свежие наборы алгоритмов (802.1X + EAP (Extensible Authentication Protocol) + TKIP/AES + MIC (Message Integrity Check), то есть это технология аутентификации, шифрование либо TKIP, либо AES и проверка целостности сообщений), WPA ломается достаточно быстро, а вот WPA2 - обеспечивает достаточно хорошую защиту, если используем AES. TKIP на данный момент уже взломан.\n\nКроме шифрования есть дополнительные методы защиты:\nФильтрация по MAC адресам и скрытие вай-фай сети.\n\n\nДля удобства пользователей придумали такую технологию как WPS/QSS – короткий пин-код (восемь символов). А ещё, чтобы нам было удобно - адаптеры сами ищут знакомые сети (по имени).\nЦена удобства - отстуствие безопасности.\nМожно создать точку доступа с распространенным именем\nАдаптер самостоятельно к нам подключится\nИ все данные уже у нас:)\n\nПароли по умолчанию и простые/словарные пароли - составляют весьма немаленькую часть наиболее распространенных проблем.\n\nСам WiFi адаптер может работать в нескольких режимах.\nClient mode - обычный режим работы.\nАдаптер получает все пакеты, сравнивает и отбрасывает все пакеты, адресованные не ему.\nMonitor mode - самый интересный для взлома режим, в этом режиме адаптер получает все пакеты и никуда их не отбрасывает.\n\nЧто же, теперь будем обходить системы защиты.\n\nФильтрация по MAC адресам.\nДоступ к точке имеет только список разрешенных MAC-адресов.\nПосмотрим как называется наш адаптер:\n\niwconfig\n\nОтключаем все программы, которые могут использовать наш адаптер:\nairmon-ng check kill\nПереводим адаптер в режим монитора:\nairmon-ng start wlan0\n\nТеперь можно запустить airodump и просто подождать - если сеть используется, мы увидим MAC-адреса клиентов и запишем их. Когда клиент уйдет и можем сменить свой MAC-адрес:\n\nifconfig wlan0 down \nifconfig wlan0 hw ether 00:11:22:AA:AA:AA \nifconfig wlan0 up\n\nИ теперь у нас есть доступ к сети.\nНо что если там включено шифрование?\nПлан действий:\n\nВключаем режим мониторинга.\nНачинаем перехватывать пакеты (можно уточнить канал, BSSID - MAC-адрес и ESSID - имя жертвы).\nМожно искать жертву вот так:\niwlist wlan0 scan\n\nили например воспользоваться утилитой wash:\nВторой параметр - имя монитора, созданного командой airmon-ng start wlan0:\n\nwash -i mon0\n\nЕсть более сложные и громоздские программы (wifite,\nkismet) с графическим интерфейсом и множеством удобств.\n\nТеперь, когда с жертвой определились, запускаем запись перехватываемых пакетов:\n\nуказываем монитор, пятый канал, имя точки и выходной файл.\nairodump-ng mon0 -c 5 --bssid AP_BSSID –w tplinkcap\n\n\nВежливо «просим» всех клиентов / или только одного переподключиться.\nдля одного клиента:\nмонитор, пятый канал\nMAC-адрес точки доступа и MAC-адрес клиента, если последний не указывать - переподключаться будут все.\n\naireplay-ng mon0 -0 5 -a 4F:B1:A4:05:5C:21 -c 5B:23:15:00:C8:57\n\nНаслаждаемся надписью WPA Handshake - это значит что мы поймали рукопожатие - т.е. те самые пакеты в которых передается зашифрованный пароль. Осталось этот пароль подобрать.\n\nДля атаки по словарю можно сгенерировать словарь с помощью crunch\nЭтот пример создаст список паролей, состоящий из восьми цифр и сохранит их в файл w.lst:\ncrunch 8 8 –t %%%%%%%% -o w.lst\n\nЧтобы запустить перебор по словарю:\n/usr/share/wordlists/nmap.lst  - словарь\nfile.cap - перехваченные пакеты\naircrack-ng –w /usr/share/wordlists/nmap.lst file.cap\n\nНо словарь может оказаться очень велик (можно оценить его размер запустив crunch 8 15, ужаснуться и остановить это).\nВ этом случае словарь можно не сохранять на диск, а сразу перенаправлять в атакующую программу, например pyrit:\n\ncrunch 8 15| pyrit -r handshake.cap -o found.pass.txt -i -    attack_passthrough\n\nПеребор может оказаться очень долгим и утомительным.\nНо если у точки доступа включен WPS - у нас есть шанс.\nСам принцип WPS: создается 8 значный пин-код, который используется для подключения к сети.\nКазалось бы 10^8 вариантов, но 1 цифра - контрольная сумма и оставшиеся символы разбивается на две части, каждая из которых проверяется отдельно, итого: 10^4+10^3 – с нормальной задержкой (чтобы роутер не блокировал WPS) двое-трое суток.\nНо и это ещё не всё, часть роутеров является уязвимыми и взламываются таким методом за несколько минут.\nХотя в целом картина не такая уж плохая.\nВ большинстве роутеров WPS исправлена или отключена.\nВ некоторой части добавлена дополнительная защита – увеличено время ожидания, либо при попытке взлома роутер отключает WPS.\n\nНу а если нам повезло, то:\nreaver –i mon0 –c 1 –b 00:11:22:33:44:55:66 –va\nК примеру: \nZyxel Keenetic Lite (ПО V1.00(AABL.1.4)D0) сломался меньше чем за минуту.\n\nТеперь когда есть доступ к WiFi - можно попытаться получить контроль над роутером:\nАтака по словарю:\nhydra -l admin -P /usr/share/wordlists/fasttrack.txt http://192.168.2.1\nЛибо пароль можно генерировать:\nhydra –l admin –x 2:8:a1 http://192.168.2.1\n\n\nЭксплойты.\n\n// Думаю ты многое про работу компьютера знаешь, пишу для полноты изложения:)\n\nПро них уже много писал, о том, что это некая последовательность действий или байт, нарушающая нормальный ход выполнения программы. Сам по себе эксплойты - только атакует уязвимость и передаёт управление своей полезной нагрузке (payload). Обычно в качестве полезной нагрузки мы запускаем шелл. На этот раз речь пойдет о том, как устроены эксплойты и как их писать.\n\nСперва несколько слов о том, как работает компьютер. Рассматриваем 32битную архитектуру - для простоты. При запуске программы операционная система загружает её в оперативную память. В оперативной памяти у каждой ячейки есть свой адрес. Программа как правило состоит из нескольких секций, наиболее важные для нас сейчас - секция кода и секция данных.\nСекция кода содержит сам код программы, который будет выполняться. Эта секция защищена от записи, поэтому на неё повлиять мы не можем.\nСекция данных - хранит переменные, которые программа будет использовать. Она доступна для записи - значит что-то может и получится.\nПосле того, как операционная система подготовила всё к запуску программы - она передаёт программе управление.\n\nПроцессор начинает последовательное выполнение команд, до тех пор пока не дойдет до команды перехода, вызова функции или до конца программы.\nПроцессор имеет собственные переменные - регистры. Они бывают общего назначения: EAX, EBX, ECX, EDX и специальные - ESP - указатель на вершину стека, EIP - указатель на инструкцию, которая будет выполнена следующей.\nПри последовательном выполнении процессор читает инструкцию по адресу, хранящемуся в EIP, увеличивает EIP на нужное количество байт (по размеру инструкции - в современной архитектуре размер инструкций может быть разный), выполняет команду и так далее.\nНо всё меняется при вызове функции - процессору нужно запомнить состояние своих регистров и запомнить куда возвращаться после окончания работы функции. При этом в вызываемой функции может понадобиться вызвать ещё какую-то функцию, следовательно процесс запоминания и восстановления запомненных значений должен быть максимально удобным и быстрым. Для этого придумали структуру данных под названием - стек. Он работает по принципу последним пришел - первым ушел. И при этом стек растет \"вверх\" - в сторону уменьшения адресов.\nПри вызове функции процессор записывает данные о состоянии регистров и адрес возврата в стек, после чего увеличивает стек - нам ведь нужна память для переменных вызываемой функции. В стеке также хранятся все локальные переменные функций, выделенные статически (т.е. для которых при компиляции был явно задан размер).\nНапример, если у нас есть программа:\n\nvoid doSomething(int d,int c)\n{\n	int k;\n	cout << b << c <<endl;\n}\n\nmain()\n{\n	int a,b;\n	doSomething(a,b);\n}\n\nТо после вызова doSomething стек будет выглядеть примерно так:\n\nмладшие адреса\n...\nвершина стека (регистр ESP указывает на это место)\nпеременная k\nпеременная d\nпеременная c\nадрес возврата в main\nпеременная a\nпеременная b\nадрес возврата (ведет в системную библиотеку, которая помогает программе завершить свою работу)\n...\nстаршие адреса\n\nРассмотрим классическую уязвимость на переполнение буфера, допустим есть такой код:\n\nmain(int argc,char *argv[])\n{\n	char s[500];\n	strcpy(s, argv[1]); // нет проверки на количество символов\n}\n\nв стеке получается такая картина:\n\nмладшие адреса\n...\nвершина стека (регистр ESP указывает на это место)\nбуфер s\nбуфер s\nбуфер s\nбуфер s\nбуфер s\nадрес возврата\n...\nстаршие адреса\n\nПолучается если мы запишем более 500 байт в буфер - то сможем переписать адрес возврата, процессор прочитает его - и перейдет туда, куда мы его отправим. Чтобы не писать 500 символов в ручную удобно использовать какой-нибудь скриптовый язык (в этой лекции - Perl), так чтобы написать букву \"A\" 500 раз нужно написать print \"A\"x500;\nДля запуска этого кода, нужно вызывать интерпретатор пёрла, всё вместе будет выглядеть как:\n\nperl -e ' print \"A\"x500; '\n\nПовторять можно не только одиночные символы, но и целые фразы:\n\nperl -e ' print \"I love you;)\"x500; '\n\nЕсли нам нужно, чтобы эти символы попали на вход нашему приложению, можно сделать так:\n\nnameOfExeFile $(perl -e ' print \"I love you;)\"x500; ')\n\nВ том числе это применимо и в отладчике gdb, который мы будем использовать позже.\n\nКонец первой части. Продолжение следует.\n\n\n\n\nСтруктура курса превращения студента первого курса в специалиста по компьютерной безопасности:\n1. Введение\n	1.1 Понятие информации\n	1.2 Понятие безопасности информации\n	1.3 Компьютерная безопасность и её место в безопасности информации\n	1.4 Основные понятия компьютерной безопасности\n		Уязвимость\n		Эксплойт\n		Баг\n		Патч\n		Троян\n		Вирус\n		Анонимность\n		Анонимайзер\n\n2. Используемые инструменты\nОсновы работы в системе Kali Linux\nПринцип работы сетей\nПоиск уязвимостей\nОсновные виды уязвимостей\nОсновные векторы атак\nОсновные источники информации об уязвимостях и эксплойтах\n3. Эксплуатация\n	3.1 Переполнение стека\n	3.2 Обход защиты стека от выполнения\n	3.3 Возвратно-ориентированное программирование\n	3.4 Обход защиты - канарейки в стеке\n4. Базы данных\n5. Криптография\n\n\n11111111\n12345678\n01234567\n\n9b9d<9ll\n9a7a;4fe",
			"file": "/E/Дела/Информационная безопасность/Иб лекции.txt",
			"file_size": 39451,
			"file_write_time": 130920563041757813,
			"settings":
			{
				"buffer_size": 22505,
				"line_ending": "Windows",
				"name": "Основа основ - раз уж мы защищаем информацию, то н"
			}
		}
	],
	"build_system": "Packages/User/CBuilder6.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"package in",
				"Package Control: Install Package"
			],
			[
				"add",
				"Project: Add Folder"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer"
	],
	"file_history":
	[
		"/C/Users/Jonathan/Desktop/скачанные файлы.gif",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/050701/T77_hall_13oct/tenzor2/nofilt.2.hs",
		"/I/l17.hs",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/031202/холл90/Новая папка/tenzor/nofiltSampleN031202T90I500CurrDataAllP.txt",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/031202/холл90/Новая папка/tenzor/nofilt2.1.hs",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/031202/холл90/Новая папка/tenzor/nofiltSampleN031202T90I500CurrData11P.txt",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/031202/холл90/Новая папка/tenzor/nofilt2.3.hmr",
		"/E/Дела/Информационная безопасность/Материалы/Новый текстовый документ.txt",
		"/C/Users/Jonathan/Desktop/Вдруг гляну.txt",
		"/E/Дела/Информационная безопасность/название команды - Team Information Offensive (TIO",
		"/E/Дела/Информационная безопасность/haxtor",
		"/E/Дела/Информационная безопасность/l11.pl",
		"/E/Дела/Информационная безопасность/Планы.txt",
		"/M/Наглядная школа/Linux Installer",
		"/M/Наглядная школа/.airinstall.cfg",
		"/M/C Alex/Дополнения/Установочные/FStarForce/Инструкция.txt",
		"/G/Downloads/john179j5w/zeronights.txt",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/050701/T77_hall_13oct/tenzor3/f200_42_0.1_0.5.2.hs",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/050701/T77_hall_13oct/tenzor3/f200_20_0.5_0.9.2.hs",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/050701/T77_hall_13oct/tenzor/nofilt.hs",
		"/I/needsmore.jpg",
		"/E/Дела/Институт физики полупроводников/Текущая работа над статьями/Paris/Новый текстовый документ.txt",
		"/I/About_Time_2013/ANY!/Unit_Key_RO.inf",
		"/E/Дела/Институт физики полупроводников/La-7/MctErrorEstimating/NoiseUnit.cpp",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/MagneticField.cpp",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/hallEffect.cpp",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/hallEffect.h",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/MagneticField.h",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/FeatUnit.cpp",
		"/G/Downloads/Контрольная работа/Контрольная работа/HashTable/HashTable/HashTableContainer.h",
		"/G/Downloads/Контрольная работа/Контрольная работа/HashTable/HashTable/targetver.h",
		"/G/Downloads/Контрольная работа/Контрольная работа/HashTable/HashTable/HashTable.cpp",
		"/G/Downloads/Vector/Vector/Vector/VectorContainer.h",
		"/G/Downloads/Vector/Vector/Vector/Vector.cpp",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/testUnit.h",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/Signal.cpp",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/Signal.h",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/UsedTypes.h",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/commonFunctions.h",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/commonFunctions.cpp",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/FilteringUnit.cpp",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/Dependence.cpp",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/Dependence.h",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/MagneticFieldDependence.cpp",
		"/E/Дела/Институт физики полупроводников/КРТ_программа Дениса/MCT/UnitMain.pas",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/Unit1.cpp",
		"/E/Дела/Институт физики полупроводников/Lcard/MCTParamsExplorer/MagneticFieldDependence.h",
		"/C/Program Files (x86)/tinc/vpn/tinc.conf",
		"/E/Архивы/Дача/ищем окна.txt",
		"/E/Дела/Курсера/Hello.hs",
		"/E/Дела/Информационная безопасность/Материалы/HackingEricson/booksrc/exploit_notesearch.c",
		"/E/Дела/Информационная безопасность/Материалы/HackingEricson/booksrc/notesearch.c",
		"/C/Users/Jonathan/Desktop/Ерош И.Л.txt",
		"/E/Дела/Информационная безопасность/Материалы/HackingEricson/Новый текстовый документ.txt",
		"/C/Users/Jonathan/Desktop/vuln.c",
		"/C/Users/Jonathan/Desktop/exptext.txt",
		"/C/Users/Jonathan/Desktop/password.rde",
		"/C/Program Files/OpenVPN/config/README.txt",
		"/C/Users/Jonathan/Desktop/fw.lst",
		"/I/Lk_test/ConsoleApplication1/ConsoleApplication1/ReadMe.txt",
		"/I/Lk_test/ConsoleApplication1/input.txt",
		"/I/Lk_test/ConsoleApplication1/Release/input.txt",
		"/I/Lk_test/ConsoleApplication1/Debug/input.txt",
		"/E/Дела/Институт СГГА/Аспирантура/Грант на стипендию президента РФ 2015/что делать.txt",
		"/E/Дела/Институт СГГА/Аспирантура/Отчеты/ToDo.txt",
		"/G/Установки/industrial-ctf/Protocols/02/readme.txt",
		"/G/Установки/industrial-ctf/readme.txt",
		"/G/Downloads/industrial-ctf/readme.txt",
		"/G/Установки/industrial-ctf/Protocols/03/readme.txt",
		"/C/Users/Jonathan/Desktop/spring-security.xml",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/050701/Е77_ФП_13oct/inputFilt50.txt",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/031126/ФП77/Новая папка/f100.mpcr",
		"/G/Downloads/IOPEXPORT_BIB (1).bib",
		"/I/RunWebGoat.bat",
		"/G/Downloads/industrial-ctf/Protocols/03/readme.txt",
		"/G/Downloads/Програмка/Програмка/D.txt",
		"/G/Установки/industrial-ctf/Reverse/01/readme.txt",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/Copy of LOCAL/ConfigHist.txt",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/Copy of LOCAL/ALARM.INI",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/Copy of LOCAL/BackupRestore.ini",
		"/G/Установки/industrial-ctf/Crypt/02/UserRocks!/readme.txt",
		"/G/Установки/industrial-ctf/Reverse/02/readme.txt",
		"/G/Установки/industrial-ctf/Reverse/03/readme.txt",
		"/G/Установки/industrial-ctf/Crypt/01/CCCrypt/readme.txt",
		"/G/Установки/industrial-ctf/Protocols/04/readme.txt",
		"/G/Установки/industrial-ctf/Fun/03/readme.txt",
		"/G/Установки/industrial-ctf/Fun/01/readme.txt",
		"/G/Установки/industrial-ctf/Protocols/01/readme.txt",
		"/G/Downloads/industrial-ctf/Crypt/04/CheckThePass/readme.txt",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/Copy of LOCAL/FIX.dtg",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/Copy of LOCAL/default.srt",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/readme.txt",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/Copy of LOCAL/AlarmAreas.AAD",
		"/G/Установки/industrial-ctf/Protocols/04/example.bin",
		"/G/Установки/industrial-ctf/Reverse/02/SplitCap_2-1/dump/dump.pcap.TCP_192-168-2-103_44818_192-168-2-116_49896.id0",
		"/G/Установки/industrial-ctf/Reverse/02/SplitCap_2-1/dump/dump.pcap.TCP_192-168-2-103_44818_192-168-2-116_49896.bin",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/Copy of LOCAL/AnimationTasks.tbc",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/LOCAL/workspace.ini",
		"/G/Установки/industrial-ctf/Crypt/03/FixIt/LOCAL/SystemTreeError.TXT",
		"/G/Downloads/industrial-ctf/Crypt/03/FixIt/LOCAL/FixUserPreferences.ini",
		"/G/Downloads/industrial-ctf/Crypt/03/FixIt/LOCAL/ALARM.INI",
		"/G/Downloads/industrial-ctf/Crypt/03/FixIt/LOCAL/SystemTree.CSV",
		"/G/Downloads/industrial-ctf/Crypt/03/FixIt/LOCAL/workspace.ini",
		"/G/Downloads/industrial-ctf/Reverse/03/readme.txt",
		"/G/Downloads/industrial-ctf/Reverse/02/readme.txt",
		"/G/Downloads/industrial-ctf/Crypt/03/FixIt/readme.txt",
		"/G/Downloads/industrial-ctf/Crypt/02/UserRocks!/readme.txt",
		"/G/Downloads/industrial-ctf/Crypt/01/CCCrypt/readme.txt",
		"/G/Downloads/industrial-ctf/Fun/01/readme.txt",
		"/G/Downloads/industrial-ctf/Fun/02/readme.txt",
		"/G/Downloads/industrial-ctf/Fun/03/readme.txt",
		"/G/Downloads/industrial-ctf/Protocols/01/readme.txt",
		"/G/Downloads/industrial-ctf/Protocols/02/readme.txt",
		"/G/Downloads/industrial-ctf/Protocols/04/readme.txt",
		"/G/Downloads/industrial-ctf/Reverse/01/readme.txt",
		"/G/Downloads/industrial-ctf/Fun/04/readme.txt",
		"/G/Downloads/industrial-ctf/Crypt/03/FixIt/LOCAL/secnet.ini",
		"/G/Downloads/industrial-ctf/Crypt/02/UserRocks!/users.act",
		"/G/Downloads/industrial-ctf/Crypt/01/CCCrypt/CIPdemo.mdf",
		"/E/Дела/Институт физики полупроводников/Архив грядущих конференций/Питер-2015/info.txt",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/050701/T77_hall_13oct/1DirSampleN050701T77I400FiltDataAllP.txt",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/050701/T77_hall_13oct/1DirSampleN050701T77I400CurrDataAllP.txt",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/031126/холл77/1DirSampleN031126T77I305CurrDataAllP.txt",
		"/E/Дела/Институт физики полупроводников/Данные измерений_16_12_2014/Обработка результатов/031126/холл77/1DirSampleN031126T77I305FiltDataAllP.txt",
		"/I/About_Time_2013/ANY!/Content002.cer",
		"/E/Дела/Институт физики полупроводников/Архив грядущих конференций/Питер-2015/Для усреднения/k3_3.hmr",
		"/E/Дела/Институт физики полупроводников/Архив грядущих конференций/Питер-2015/Для усреднения/k3_1.hs",
		"/E/Дела/Институт физики полупроводников/Архив грядущих конференций/Питер-2015/Для усреднения/k2_1.hs"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			" ",
			"\\t",
			"\"",
			"\",",
			" ",
			"эксплойт",
			"запуск",
			"экспло",
			"экс",
			"pass",
			" ",
			"\\n\\n",
			"      ",
			"\\t",
			"\\n",
			"\\n\\n",
			"[^\\x00-\\x7F]",
			" ",
			"playlist",
			"save",
			"file",
			"extrem",
			"string",
			"averageData",
			"featData(Data",
			"featData(",
			"calculateTenz",
			"enable",
			"command",
			"SNP!AM9",
			"-i",
			"list",
			"quality",
			"Н!AP10",
			"clean",
			"setEn",
			"#beg-4",
			"вызов",
			"input",
			"choose",
			"recursiveSort",
			"doAlgAnim",
			".directive",
			"out of order",
			"out of ",
			"featData",
			"filterDataH",
			"featData",
			"filterdataH",
			"GetEqualNumberOfPoints",
			"filterData",
			"featData",
			"average",
			"getPointer",
			"Ахтунг",
			"average",
			"averageDa",
			"featD",
			"sigh",
			";",
			"average",
			"calculateTenzor",
			"Quick",
			"start",
			"<rect ng-attr-style=\"$$data.style$$\"",
			"Merge",
			"merge",
			"<rect ng-show=\"merge\" ng-attr-style=\"$$data.bgStyle$$\" ng-repeat=\"data in dataset\" ng-attr-width=\"$$width()$$\" ng-attr-height=\"$$height(data.bgVal)$$\" ng-attr-x=\"$$x($index)$$\" ng-attr-y=\"$$y(data.bgVal)$$\" class=\"ng-scope ng-hide\" style=\"display:none\" width=\"20\" height=\"0\" x=\"20\" y=\"200\">    </rect>",
			"<button",
			"<script",
			"<rect",
			"<!--",
			"<button",
			"<script",
			"fil",
			"playli",
			"albu",
			"you",
			"(vimeo.com/)+([0-9])*",
			"(vimeo.com/)+([1-9])*",
			"(vimeo.com/)+*",
			"(vimeo.com/)+*(.+)",
			"vimeo.com/*",
			"for myi=0 to NPoint-1 do",
			":=",
			"};",
			"end",
			"begin",
			"}",
			"{",
			"Integer",
			"extended",
			"tred2",
			"makeMNK",
			"makeInter",
			"makeMnk",
			" ",
			"2,0000",
			" ",
			"featData(",
			"2,000",
			"saveToFil",
			"save",
			"featDa",
			",",
			"median",
			"filterDataH",
			"extrapolateData(",
			"averageData",
			"filterData",
			"featData",
			"filterData(",
			"averageData(",
			"featData",
			"averageData(",
			"extrapolate",
			"extrapolateDa",
			"featData",
			"averageData",
			"featData",
			"calculateTenz",
			"i++",
			" ",
			"extrapolateData",
			"extrapo",
			"loadData",
			"filter",
			"calculateTenzor"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\t",
			"",
			"\\n",
			"\\r",
			"",
			"\\t",
			"\\n",
			"\\n\\n",
			" ",
			"\\n\\t\\n",
			"",
			"PGT!C9",
			"SNP!C9",
			"\\n{\\n}",
			"{\\n}",
			"for (myi=0; myi<NPoint; ++myi)",
			"=",
			"}",
			"{",
			"*/",
			"/*",
			"int",
			"long double",
			"	",
			".",
			"	",
			"++i",
			"	",
			"THallEffect",
			"TSignal",
			"roundM",
			",",
			"\\r"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/E/Дела/Информационная безопасность/CtfPractise.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3734,
						"regions":
						{
						},
						"selection":
						[
							[
								3642,
								3642
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1716.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 150,
						"regions":
						{
						},
						"selection":
						[
							[
								123,
								139
							]
						],
						"settings":
						{
							"auto_name": "флаги от Касперского",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 356,
						"regions":
						{
						},
						"selection":
						[
							[
								162,
								355
							]
						],
						"settings":
						{
							"auto_name": "Threat Modeling: Designing for Security",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/E/Дела/Информационная безопасность/Иб лекции.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22505,
						"regions":
						{
						},
						"selection":
						[
							[
								22505,
								22497
							]
						],
						"settings":
						{
							"auto_name": "Основа основ - раз уж мы защищаем информацию, то н",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 7744.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 118.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "MCTParamsExplorer.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 265.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
